/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u16,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type State = Account<StateAccountData>;

export type StateAccountData = {
  discriminator: Uint8Array;
  admin: PublicKey;
  numRegistered: number;
  bump: number;
};

export type StateAccountDataArgs = {
  admin: PublicKey;
  numRegistered: number;
  bump: number;
};

export function getStateAccountDataSerializer(): Serializer<
  StateAccountDataArgs,
  StateAccountData
> {
  return mapSerializer<StateAccountDataArgs, any, StateAccountData>(
    struct<StateAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['admin', publicKeySerializer()],
        ['numRegistered', u16()],
        ['bump', u8()],
      ],
      { description: 'StateAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([216, 146, 107, 94, 104, 75, 182, 177]),
    })
  ) as Serializer<StateAccountDataArgs, StateAccountData>;
}

export function deserializeState(rawAccount: RpcAccount): State {
  return deserializeAccount(rawAccount, getStateAccountDataSerializer());
}

export async function fetchState(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<State> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'State');
  return deserializeState(maybeAccount);
}

export async function safeFetchState(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<State | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeState(maybeAccount) : null;
}

export async function fetchAllState(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<State[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'State');
    return deserializeState(maybeAccount);
  });
}

export async function safeFetchAllState(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<State[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeState(maybeAccount as RpcAccount));
}

export function getStateGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey(
    'sdpHelloWorld',
    '2G1CwDWtk1oYQGSVCU2WB7cMD5j3UgVwtm6737E4UGNV'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      admin: PublicKey;
      numRegistered: number;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      admin: [8, publicKeySerializer()],
      numRegistered: [40, u16()],
      bump: [42, u8()],
    })
    .deserializeUsing<State>((account) => deserializeState(account))
    .whereField(
      'discriminator',
      new Uint8Array([216, 146, 107, 94, 104, 75, 182, 177])
    );
}
